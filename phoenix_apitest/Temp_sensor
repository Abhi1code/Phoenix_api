#define WIFI_SSID   "PHOENIX-2"     //"Phoenix Robotix Demo"
#define WIFI_PASS   "iamironman"
#define AUTH_KEY    "zYjbLDiIyaD5Z2WhXoLJ30UvWjNQsE1zNiEPdxPebwt2KJWuezuD1tG0cVjFOQtE"

#define TRANSMISSION_TIME (300)    //Time interval in seconds

RTC_DATA_ATTR int bootCount = 0;   //count number of boot.
#define uS_TO_S_FACTOR 1000000  /* Conversion factor for micro seconds to seconds */

#define STATIC_IP_CONNECTION   0

uint8_t mac[6] {0xA8, 0xD9, 0xB3, 0x0D, 0xAA, 0xC1};    //MAC Address you want to set

const int Wifi_led = 18;

#define EE_AUTH_KEY    10
#define EE_QR_CODE     100
#define EE_WIFI_SSID   1
#define EE_WIFI_SSID   150
#define EE_WIFI_PASS   200

#define TEMPERATURE1_CONTROL_PIN   13   /// old - 12
#define TEMPERATURE2_CONTROL_PIN   16
#define TEMPERATURE3_CONTROL_PIN   17

#define BATTERY_PIN                13

#define ONE_WIRE_BUS_TEMP1  25   // GPIO pin for temp sensor 1 
#define ONE_WIRE_BUS_TEMP2  26  //  GPIO pin for temp sensor 2
#define ONE_WIRE_BUS_TEMP3  27 //   GPIO pin for temp sensor 3

#include<TimeLib.h>
#include <esp_wifi.h> //NEED THIS TO COMPILE WHEN WE WANT TO SET MAC ADDRESS
#include<WiFi.h>
#include <pr_utility_string_1_0_0.h>

#include <OneWire.h>
#include <DallasTemperature.h>
#include<EEPROM.h>

#include <driver/adc.h>

#if STATIC_IP_CONNECTION == 1       // PHOENIX - 2 STATIC IP CONFIGURATION DETAILS
    // Set your Static IP address
    IPAddress local_IP(192, 168, 225, 157);
    // Set your Gateway IP address
    IPAddress gateway(192, 168, 225, 1);
    
    IPAddress subnet(255, 255, 255, 0);
    IPAddress primaryDNS(192, 168, 225, 1);   //optional
    IPAddress secondaryDNS(8, 8, 8, 8); //optional
#endif

char restartFlag = 0;
long gv_time = 0;


// Replace with your network credentials
const char* host = "http://admin.aurassure.com/";

WiFiClient client;

void(* resetFunc) (void) = 0;//declare reset function at address 0

void blinkLed(int del, int t = 1) {
  for (int i  = 1; i <= t; i++ ) {
    digitalWrite(LED_BUILTIN, LOW);
    digitalWrite(Wifi_led, LOW);
    delay(del);
    digitalWrite(LED_BUILTIN, HIGH);
    digitalWrite(Wifi_led, HIGH);
    delay(200);
    digitalWrite(LED_BUILTIN, LOW);
    digitalWrite(Wifi_led, LOW);
  }
}
///////////////  device setup ////////////////////////////////////

void setup() {
  gv_time = millis()/1000;
  
  Serial.begin(115200);
  pinMode(Wifi_led, OUTPUT);

  Serial.println("\n\n\nBoot number: " + String(bootCount));
  
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  
  EEPROM.begin(512); // what is 512.

  setupWifi();
  
  if(!connectToRouter()){
    if(!connectToRouter()){ //retry one more time.
      ESP.restart();
    }
  }
}

int count = 0;

void loop() {
    
    char data[300]; 
    
   //*
    
    char serverIp[30] = "52.66.148.209";
    long serverPort = 51234; 
    
    //Connect to server.
    if(isConnectedToServer() == 0){
      connectToServer(serverIp, serverPort);
      updateDeviceTime();
    }

    readAndPrepareDataPacket(data, sizeof(data));
    Serial.print("\nData Packet : ");  Serial.println(data);

   
    client.print(data);   
    
    serverResponse(data, sizeof(data));
    Serial.print("\nServer Response : ");  Serial.println(data);
    
    if (strlen(data) > 10) {
      parseServerData(data);
      if (restartFlag == 1) {
        resetFunc(); //call reset
      }
    }
    
    blinkLed(200, 10);
    //*/
    //set time interval.
    Serial.print(F("\n\nMillis : ")); Serial.println(millis()/1000);
    gv_time = millis()/1000; 
    if(gv_time < TRANSMISSION_TIME ){
        long timeToSleep = abs(TRANSMISSION_TIME - gv_time);
        bootCount++;
        esp_sleep_enable_timer_wakeup(timeToSleep * uS_TO_S_FACTOR);
        esp_deep_sleep_start();
    }
    //while((millis()/1000 - gv_time) < TRANSMISSION_TIME) {delay(10);
    
    
}




/////////////////////////////// Input read section /////////////////////////////////////////////////////////////////
//read temeperature
float readTemperature(int dataPin, int controlPin){
  float temp;
  OneWire oneWire(dataPin);
  DallasTemperature DS18B20(&oneWire);
  delay(500);
  pinMode(controlPin, OUTPUT);
  digitalWrite(controlPin, HIGH);
  int count = 3;
  do{
      delay(500);
      DS18B20.requestTemperatures();
      delay(1000);
      temp = DS18B20.getTempCByIndex(0);
      count--;
  }while((temp < -40 || temp > 100) && (count>0) );
  digitalWrite(controlPin, LOW); 

  if((temp < -40) || (temp > 100)) { temp = NAN; }
  
  return temp;
}

//read battery voltage from analog chenal
float readBatteryVoltage(){
  float analogValue = 0;
  int val;
  //Averaging 10 readings
  for (int i = 0; i < 10; i++) {
    //analog read logic of esp32   -  https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/adc.html
    adc1_config_width(ADC_WIDTH_BIT_12);
    adc1_config_channel_atten(ADC1_CHANNEL_6, ADC_ATTEN_11db);
    val = adc1_get_raw(ADC1_CHANNEL_6);
    analogValue += val;
    delay(20);
  }
  analogValue /= 10;
  analogValue = (analogValue * 3.3) / 4096;
  Serial.print("\nAnalog voltage : ");
  Serial.println(analogValue);
  analogValue = analogValue * 2; //voltage devider compensation - 2.45
  
  return analogValue;
}

//prepare data packet with data points
void readAndPrepareDataPacket(char* data, int maxlen){
    float temp1 , temp2, temp3, batteryVoltage;
    //blinkLed(500,2);
    
    temp1 = readTemperature(ONE_WIRE_BUS_TEMP1, TEMPERATURE1_CONTROL_PIN);
    Serial.print("\n\nTemperature 1: ");   Serial.println(temp1);
    
    temp2 = readTemperature(ONE_WIRE_BUS_TEMP2, TEMPERATURE2_CONTROL_PIN);
    Serial.print("\n\nTemperature 2: ");   Serial.println(temp2);
    
    temp3 = readTemperature(ONE_WIRE_BUS_TEMP3, TEMPERATURE3_CONTROL_PIN);
    Serial.print("\n\nTemperature 3: ");   Serial.println(temp3);
    
    //read battery voltage
    batteryVoltage = readBatteryVoltage();
    Serial.print("Battery Voltage : ");   Serial.println(batteryVoltage);
    

    //prepare data packet
    String dd = String(day());     dd = dd.length() == 1 ? ("0" + dd) : dd;
    String mm = String(month());   mm = mm.length() == 1 ? ("0" + mm) : mm;
    String yy = String(year());
    String hh = String(hour());    hh = hh.length() == 1 ? ("0" + hh) : hh;
    String mn = String(minute());  mn = mn.length() == 1 ? ("0" + mn) : mn;
    String ss = String(second());  ss = ss.length() == 1 ? ("0" + ss) : ss;

    String str; str.reserve(30);
    char lv_date[11];
    strncpy(lv_date, dd.c_str(), sizeof(lv_date));
    strncat_P(lv_date, (PGM_P)(F("-")), sizeof(lv_date) );
    strncat(lv_date, mm.c_str(), sizeof(lv_date));
    strncat_P(lv_date, (PGM_P)(F("-")), sizeof(lv_date));
    strncat(lv_date, yy.c_str(), sizeof(lv_date));
    
    char lv_time[9];
    strncpy(lv_time, hh.c_str(), sizeof(lv_time));
    strncat_P(lv_time, (PGM_P)(F(":")), sizeof(lv_time) );
    strncat(lv_time, mn.c_str(), sizeof(lv_time));
    strncat_P(lv_time, (PGM_P)(F(":")), sizeof(lv_time) );
    strncat(lv_time, ss.c_str(), sizeof(lv_time));
    
    strncpy(data, "{\"type\":\"data\",\"message\":", maxlen);
    strncat(data, "{\"d\":\"", maxlen);
    strncat(data, lv_date, maxlen);
    strncat(data, "\",\"t\":\"", maxlen);
    strncat(data, lv_time, maxlen);
    strncat(data, "\",\"dp\":{\"temperature\":\"", maxlen);
    str = String(temp1, 2);
    strncat(data, str.c_str(), maxlen);
  
    strncat(data, "\",\"humidity\":\"", maxlen);
    str = String(temp2, 2);
    strncat(data, str.c_str(), maxlen);
    strncat(data, "\",\"so2\":\"", maxlen);
    str = String(temp3, 2);
    strncat(data, str.c_str(), maxlen);
    strncat(data, "\",\"no2\":\"", maxlen);
    str = String(batteryVoltage, 2);
    strncat(data, str.c_str(), maxlen);
    strncat(data, "\"}}}\n", maxlen);
}





//////////////// WIFI Functionality ///////////////////////////////////////////////
//Initialize wifi module
void setupWifi(){
  WiFi.begin();

  Serial.println(F("\n\n\nBooting...."));
  Serial.print(F("ESP32 MAC: "));  Serial.println(WiFi.macAddress()); 
  
  //read updated MAC address from eeprom.
  //esp_wifi_set_mac(ESP_IF_WIFI_STA, &mac[0]); // esp32 code
  //Serial.print("NEW ESP32 MAC: ");  Serial.println(WiFi.macAddress()); //This will read MAC Address of ESP*/
  
  #if STATIC_IP_CONNECTION == 1
    if (!WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS)) {
      Serial.println("Static IP configurations failed");
    }
    else {
      Serial.println("Static IP configured successfully ");
    }
  #endif
}

int connectToRouter() {
  // ESP.wdtEnable(30000);
  WiFi.mode(WIFI_STA);
  char ssid[30] = WIFI_SSID, password[30] = WIFI_PASS;
  //getWifiSsid(ssid, sizeof(ssid));
  //getWifiPassword(password, sizeof(password));

  //start connection to router.
  WiFi.begin(ssid, password);
  Serial.print(F("Connecting "));
  long mil = millis();

  //check if connection to router is completed or not. max wait time is 10 sec.
  while ((WiFi.status() != WL_CONNECTED) && ((millis()-mil)/1000 < 10)) {
      delay(500);
      Serial.print(".");
  }
  
  //check if timeout happen or not
  if((millis()-mil)/1000 >= 10) {  //if timeout occur then connection to router is faild.
    Serial.println("Connection Failed! Rebooting...");
    delay(1000);
    return 0;
  }
  else {
    blinkLed(200, 5);
    Serial.print("Device connected to : "); Serial.println(ssid);
    Serial.print("IP address: "); Serial.println(WiFi.localIP());
    return 1;    
  }

}
//return true if modem is connected to router.
int isConnectedToRouter(){
  return WiFi.status();
}

//connect to server.
int connectToServer(const char* serverIp, const long serverPort){
  char auth_key[70] = AUTH_KEY;
  char data[300];
  do{
    if(!client.connect(serverIp, serverPort)) {
      Serial.println(F("Server connection failed!!!"));
      Serial.println(F("Wait 5 sec..."));
      blinkLed(1000, 2);
      delay(1000);
      count++;

      if (count > 3) {
        resetFunc(); //call reset
        //wifiSetup();
        //delay(5000);
      }
    }
    else {
      count = 0;

      //send authentication key first.
      //getAuthkey(auth_key, sizeof(auth_key));
      strncpy(data, "{\"type\":\"auth\",\"message\":{\"token\":\"", sizeof(data));
      strncat(data, auth_key, sizeof(data));
      strncat(data, "\"}}\n", sizeof(data));

      Serial.print("\nAuthkey Packet : "); Serial.println(data);
      client.print(data);
      serverResponse(data, sizeof(data));
      Serial.print("\nServer Response : ");  Serial.println(data);
  
     }
  }while(count !=0); //retry until server is connected, maximum try 3 times.
  return 1;
}

int isConnectedToServer(){
  return client.connected();
}


//receive response from server
void serverResponse(char* rxdata, int maxlen ) {
  int count = 0;
  char c;
  unsigned long timeOut = millis();
  while((client.available() <= 0)&&( (millis() - timeOut) < 3000));
  while ( (millis() - timeOut) < 3000){
      while (client.available() > 0)  {
          c = client.read();
          if(count < maxlen) { rxdata[count++] = c; }
         
      }
      
  }
  if(count < maxlen) { rxdata[count] = '\0'; }
  else { rxdata[count-1] = '\0';   }
}



void sendTimeRequestToServer()
{
  char timeRequest[30];
  Serial.println("SENDING TIME REQUEST TO SERVER");
  strcpy(timeRequest, "{\"type\":\"time_req\"}");
  client.print(timeRequest);
}
/*
void serverTimeResponse(char* rxData, int len)
{
  int timeout = millis() + 5000;
  String line;
  while (client.available() == 0) {
    if (timeout - millis() < 0) {
      Serial.println(">>> Client Timeout !");
      client.stop();
      return;
    }
  }
  while (client.available()) {
    line = client.readStringUntil('\r');
    Serial.print("Time Response from Server : ");
    Serial.println(line);
  }
  line.toCharArray(rxData, len);
}
*/

int find_value(char * data, int pos, char v)
{
  for (int i = pos; data[i] != '\0'; i++)
  {
    if (data[i] == v) return i;
  }
}

void parseDataAndTimeFromServer(char* rxData, char* dataStore) {
  char ptrResponse[30] = "time_response";
  char temp[30];
  char value[30];
  dataStore[0] = '\0';
  int a;
  if (a = findText(ptrResponse, rxData)) {
    int b =  find_value(rxData, a, ':');
    int c = find_value(rxData, b, '}');
    substringChar(temp, sizeof(temp), rxData, strlen(rxData), b + 1, c);
    int position = find_value(temp, 0, '/');
    substringChar(value, sizeof(value), temp, strlen(temp), 1, position);
    strcat(dataStore, value);
    strcat(dataStore, "/");
    int position1 = find_value(temp, position + 1, '/');
    substringChar(value, sizeof(value), temp, strlen(temp), position + 1, position1);
    strcat(dataStore, value);
    strcat(dataStore, "/");
    int position2 = find_value(temp, position1 + 1, ',');
    substringChar(value, sizeof(value), temp, strlen(temp), position1 + 1, position2);
    int d_year = atoi(value);
    char e[10];
    itoa(d_year, e, 10);
    strcat(dataStore, e);
    strcat(dataStore, ",");
    int position3 = find_value(temp, position2 + 1, '"');
    substringChar(value, sizeof(value), temp, strlen(temp), position2 + 1, position3);
    strcat(dataStore, value);
  }
}

void getTimeAndDateFromServer(char* dateAndTime) {
  char rxData[300];
  sendTimeRequestToServer();
  delay(3000);
  serverResponse(rxData, sizeof(rxData));
  parseDataAndTimeFromServer(rxData, dateAndTime);
}

int updateDeviceTime() {
  int dd = 0;
  int mm = 0;
  int yy = 0;
  int hr = 0;
  int mn = 0;
  int sc = 0;

  if (year() < 2019 ) {

    DebugSerial.println("ESP32 clock is Incorrect!!!");
    DebugSerial.println("Updating Esp32 clock with Server Time..");
    char curTime[30];
    strcpy(curTime, "00/00/00,00:00:00");
    char temp[6];
    char Start = 0;
    char End = findIndexOfChar(curTime, strlen(curTime), '/', Start);
    getTimeAndDateFromServer(curTime);
    Serial.println(curTime);
    Start = 0;
    End = findIndexOfChar(curTime, strlen(curTime), '/', Start);
    substringChar(temp, sizeof(temp), curTime, sizeof(curTime), Start, End);
    dd = atoi(temp);
    //  Serial.println(dd);

    Start = End + 1;
    End = findIndexOfChar(curTime, strlen(curTime), '/', Start);
    substringChar(temp, sizeof(temp), curTime, sizeof(curTime), Start, End);
    mm = atoi(temp);
    // Serial.println(mm);

    Start = End + 1;
    End = findIndexOfChar(curTime, strlen(curTime), ',', Start);
    substringChar(temp, sizeof(temp), curTime, sizeof(curTime), Start, End);
    yy = atoi(temp);
    //Serial.println(yy);

    Start = End + 1;
    End = findIndexOfChar(curTime, strlen(curTime), ':', Start);
    substringChar(temp, sizeof(temp), curTime, sizeof(curTime), Start, End);
    hr = atoi(temp);
    // Serial.println(hr);

    Start = End + 1;
    End = findIndexOfChar(curTime, strlen(curTime), ':', Start);
    substringChar(temp, sizeof(temp), curTime, sizeof(curTime), Start, End);
    mn = atoi(temp);
   //Serial.println(mn);

    Start = End + 1;
    End = strlen(curTime);
    substringChar(temp, sizeof(temp), curTime, sizeof(curTime), Start, End);
    sc = atoi(temp);
    //Serial.println(sc);

    if (yy + 2000 >= 2018) {
      setTime(hr, mn, sc, dd, mm, yy);
    }
  }
  else {
    //Serial.println("Device Time is Ok...");
  }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Handle server response and take corresponding action
int parseServerData(char* serverData) {
  char configMessage[30];
  char modemType;
  char p_str[25];
  Serial.println(serverData);
  strcpy_P(p_str, (PGM_P)(F("\"wifi_ssid\"")) );
  if ( findText( p_str, serverData) != -1 ) {
    parseJasonValue(serverData, p_str, configMessage, sizeof(configMessage));
    storeWifiSsid(configMessage);
    restartFlag = 1;
  }
  strcpy_P(p_str, (PGM_P)(F("\"wifi_pass\"")) );
  if ( findText( p_str, serverData) != -1 ) {
    parseJasonValue(serverData, p_str, configMessage, sizeof(configMessage));
    storeWifiPassword(configMessage);
    restartFlag = 1;
  }
  strcpy_P(p_str, (PGM_P)(F("\"message_id\"")) );
  char rxData[200];
  if (findText( p_str, serverData) != -1) {
    parseJasonValue(serverData, p_str, configMessage, sizeof(configMessage));
    strcpy_P( rxData, (PGM_P)(F("{\"type\":\"confirm\",\"message\":{\"message_id\":\"")) );
    strcat( rxData, configMessage);
    strcat_P( rxData, (PGM_P)(F("\"}}")) );
    Serial.println(rxData);
    client.print(rxData);
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////EEPROM STORAGE //////////////////////////////////////////////
//read wifi ssid from eeprom
void getWifiSsid(char* ssid, int maxlen){
  int i = EE_WIFI_SSID, j = -1; 
  do{ 
     ++j;
     ssid[j] = char(EEPROM.read(i)); 
     ++i;
  }while((ssid[j] != '\0')&& ( j < maxlen));
  Serial.print(F("SSID: ")); Serial.println(ssid);
}

//read wifi password from eeprom
void getWifiPassword(char* password, int maxlen){
  int i = EE_WIFI_PASS, j = -1; 
  do{ 
     ++j;
     password[j] = char(EEPROM.read(i)); 
     ++i;
  }while((password[j] != '\0')&& ( j < maxlen));
  Serial.print(F("PASS: ")); Serial.println(password);
}

//store wifi ssid in eeprom
void storeWifiSsid(const char* ssid){
    int i, k;
    int maxLen = 29;
    Serial.print(F("Storing ssid : ")); Serial.println(ssid);
    for ( i = EE_WIFI_SSID, k = 0; ssid[k] != '\0' && k< maxLen; ++i, ++k) {
      EEPROM.write(i, ssid[k]);
    }
    EEPROM.write(i, '\0');
    EEPROM.commit();
}

//store wifi password in eeprom
void storeWifiPassword(const char* password){
    int i, k;
    int maxLen = 29;
    Serial.print(F("Storing password : ")); Serial.println(password);
    for ( i = EE_WIFI_PASS, k = 0; (password[k] != '\0') && (k< maxLen); ++i, ++k) {
      EEPROM.write(i, password[k]);
    }
    EEPROM.write(i, '\0');
    EEPROM.commit();
}

//reading AuthKey from ESP8266 Flash memory
void getAuthkey(char* auth_key, int maxlen){
    
    int i = EE_AUTH_KEY, j = -1; 
    do{ 
       ++j;
       auth_key[j] = char(EEPROM.read(i)); 
       ++i;
    }while((auth_key[j] != '\0')&& ( j < maxlen));
}


///////////////    wake up and deep sleep  ///////////////////////////////////////////////////////////////////////////////
/*
Method to print the reason by which ESP32
has been awaken from sleep
*/
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;

  wakeup_reason = esp_sleep_get_wakeup_cause();

  switch(wakeup_reason)
  {
    case 1  : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case 2  : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case 3  : Serial.println("Wakeup caused by timer"); break;
    case 4  : Serial.println("Wakeup caused by touchpad"); break;
    case 5  : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.println("Wakeup was not caused by deep sleep"); break;
  }
}




